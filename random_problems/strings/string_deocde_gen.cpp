/*
Given a String s and a hashmap containing certain decodings for all the characters of alphabet. Find all possible passwords that can be generated by replacing decodings in the string s. 
Note that decodings of a charachter can only be single charachters
Eg: String s="abcde"
decodings given
a-{1,2,p,o,q}
b-{2,y}
c-{p}
d-{4,a,m,n}
e-{9,z,x}
h-{1}
'
'
'
x-{0}
y-{4,k,l}
z-{r,5}
So possible set passwords will be 
abcde,1bcde,2bcde,pbcde,obcde,qbcde,     //replace a with all possible decodings
a2cde,12cde,22cde,p2cde,o2cde,q2cde,aycde,1ycde,2ycde,pycde,oycde,qycde      //replace b will all possible decodings
a2pde,12pde,22pde,p2pde,o2pde,q2pde,aypde,1ypde,2ypde,pypde,oypde,qypde.....//replace c will all possible decodings

   */
#include <iostream>
#include <fstream>
#include <sstream>
#include <list>

using namespace std;

struct _map {
	char a;
	int len;
	char val[20];
};

// Create it statically, just avoiding creation of test input files in this case
struct _map codeMap[6] = {
	{'a', 5,  {'1','2','p','o','q'}},
	{'b', 2,  {'2', 'y'}},
	{'c', 1,  {'p'}},
	{'d', 4, {'4','a','m','n'}},
	{'e', 3, {'9','z','x'}},
	{'h', 1, {'1'}}
};

int outerLoopCount = 0;
int innerLoopCount = 0;

static void
generate_passwords (list<string> &strList, int pos, int len)
{
	if (pos >= len)
		return;

	list<string> newList;

	string first = strList.front ();
	char toReplace = first[pos] - 'a'; 

	int eachIterLoopCount = 0;
	for (list<string>::iterator iter = strList.begin (); iter != strList.end (); iter++)
	{
		eachIterLoopCount++;
		outerLoopCount++;
		for (int i = 0; i < codeMap[toReplace].len; i++)
		{
			string newStr = *iter;
			newStr[pos] = codeMap[toReplace].val[i];	
			newList.push_back (newStr);
			innerLoopCount++;
		}
	}

	cout << "Outer Iter Loop count on each pos -  " << pos << " count " << eachIterLoopCount << endl;

	strList.merge (newList);
	generate_passwords (strList, pos+1, len);
}

int main (int argc, char *argv[])
{
	string str("abcde");	
	list<string> strList;

	strList.push_back (str);
	generate_passwords (strList, 0, str.length ());

	for (list<string>::iterator iter=strList.begin(); iter != strList.end (); iter++)
	{
//		cout << *iter << endl;
	}

	cout << "Number of strings generated " << strList.size () << endl;
	cout << "Outer Loop count - " << outerLoopCount << " Inner Loop Count - " << innerLoopCount << endl;
	// Number of string that will get generated for this input 'abcde'
	// 6*3*2*5*4 = 720 

	// complexity analysis
	// memory - 
	// speed - O(mn) power n

	// test cases used

	return 0;
}
